#!/bin/bash
exec </dev/null >>/var/vcap/sys/log/jumpbox.log 2>&1

log() {
  echo >&2 "[$(date +'%Y%m%d %HH%MM.%SS')] jumpbox/setup[$$]: " $*
}

global_go=/usr/local/go

newuser() {
  user=$1         ; shift
  shell=$1        ; shift
  repo=$1         ; shift
  setup_script=$1 ; shift

  home="/var/vcap/store/jumpbox/home/${user}"
  [ -z ${shell} ] && shell="/bin/bash"

  log "Setting up user ${user}"
  if ! grep -q "^${user}:" /etc/passwd; then
    log "User ${user} does not exist; adding"
    /usr/sbin/useradd -m -d ${home} -s ${shell} ${user}
  fi

  log "Setting up sudoers access for ${user}"
  if ! grep -q "^${user} " /etc/sudoers; then
    log "Access not found; configuring ${user} with NOPASSWD:ALL access"
    (echo; echo "${user} ALL=(ALL:ALL) NOPASSWD:ALL") >> /etc/sudoers
    chmod 0400 /etc/sudoers
  fi

  if [[ $# -gt 0 ]]; then
    log "Setting up ${user} SSH authorized keys"
    mkdir -p ${home}/.ssh
    chmod 0700 ${home}/.ssh
    touch ${home}/.ssh/authorized_keys
    for key in "$@"; do
      if ! grep -q "^$key$" ${home}/.ssh/authorized_keys; then
        echo "$key" >> ${home}/.ssh/authorized_keys
      fi
    done
  fi
  chown -R ${user} ${home}

  if [[ -n "${repo}" ]]; then
    log "Setting up ${user} environment"
    if [[ ! -d ${home}/env ]]; then
      log "Environment repo ${home}/env not found; cloning from upstream"
      git clone ${repo} ${home}/env

      log "Running install script from inside of ${home}/env, as ${user} with HOME=${home}"
      (cd ${home}/env
       export HOME=${home}
       export USER=${user}
       [ -x ./install ] && ./install || true)
    fi
  fi

  log "Running setup script ('${setup_script}') from inside of ${home}/env, as ${user} with HOME=${home}"
  (sudo -iu ${user} bash -c "[ -x ${setup_script} ] && ${setup_script} || true" )

  log "Setting up golang for ${user}"
  mkdir ${home}/go
  cat >>${home}/.bashrc << EOF
export GOPATH=${home}/go
export PATH=\${PATH}:${global_go}/bin:\${GOPATH}/bin
EOF

  chown -R ${user} ${home}
}

set -e
rm -f /etc/profile.d/jumpbox.sh
cp /var/vcap/jobs/jumpbox/env /etc/profile.d/jumpbox.sh
source /etc/profile.d/jumpbox.sh

case $1 in

  start)
    log "Creating persistent home container"
    mkdir -p /var/vcap/store/jumpbox/home
    log "Fixing permissions on /tmp"
    chmod 1777 /tmp

    log "Installing go to ${global_go}"
    if [[ ! -e ${global_go} ]]; then
        ln -s /var/vcap/packages/golang ${global_go}
    fi

    log "Setting hostname to <%= p('jumpbox.hostname') %>"
    echo "<%= p('jumpbox.hostname') %>" > /etc/hostname
    hostname -b -F /etc/hostname

    log "Setting up /etc/hosts"
<% p('jumpbox.hosts').each do |line| %>
    if ! grep -q '^<%= line %>$' /etc/hosts; then
        echo "<%= line %>" >> /etc/hosts
    fi
<% end %>

    log "Setting up sudoers to allow certain environment variables to not be reset"
    for var in http_proxy https_proxy ftp_proxy no_proxy EDITOR; do
    if ! grep '^Defaults env_keep' /etc/sudoers | grep -q "${var}"; then
            echo "Defaults env_keep += \"${var}\"" >> /etc/sudoers
        fi
    done

<% p('jumpbox.users').each do |user| %>
# jumpbox.users[<%= user['name'] %>
    newuser "<%= user['name'] %>" \
        "<%= user['shell'] %>" \
        "<%= user['env'] %>" \
        "<%= user['setup_script'] || '/var/vcap/packages/jumpbox/setup' %>"<% if !(user['ssh_keys'] || []).empty? %> \<% end %>
       <% (user['ssh_keys'] || []).each do |k| %> "<%= k %>"<% end %>
<% end %>

    touch /var/vcap/sys/run/.jumpbox_test
    ;;

  stop)

    ;;

  *)
    echo "Usage: jumpbox_ctl {start|stop}"
    ;;

esac
