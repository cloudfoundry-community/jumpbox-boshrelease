---
meta:
  name:    jumpbox
  release: Jumpbox
  target:  pipes
  url:     https://pipes.starkandwayne.com

  test-errand: inventory

  manifest:
    path: ci/manifest.yml

  git:
    name:  Stark & Wayne CI Bot
    email: ci@starkandwayne.com

  bosh-lite:
    target:   https://10.128.4.73:25555
    username: ((thunder-dome.username))
    password: ((thunder-dome.password))
    cacert:   ((thunder-dome.ca-certificate))

  aws:
    access_key: ((cfcommunity.access))
    secret_key: ((cfcommunity.secret))

  github:
    owner:        cloudfoundry-community
    repo:         jumpbox-boshrelease
    branch:       master
    private_key:  ((starkandwayne-bot-github.private-key))
    access_token: ((starkandwayne-bot-github.access-token))

  shout:
    url:      http://10.128.4.65:7109
    username: ((shout.username))
    password: ((shout.password))

groups:
  - name: blobs
    jobs:
    - genesis
    - safe
    - esuf
    - cf
    - cloudfoundry-utils

jobs:
  - name: genesis # {{{
    public: true
    plan:
    - in_parallel:
      - { get: git }
      - { get: genesis, trigger: true }
    - task: update-genesis
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
        - name: git
        - name: genesis
        outputs:
        - name: pushme
        run:
          path: ./git/ci/scripts/update-blob
        params:
          REPO_ROOT:        git
          REPO_OUT:         pushme
          RELEASE_DIR:      genesis
          BLOB_DIR:         genesis
          BLOB_NAME:        genesis
          BLOB_BINARY:      genesis
          BLOB_DESTINATION: jumpbox/bins/genesis
          BLOB_CLEANUP:     jumpbox/bins/genesis
          AWS_ACCESS_KEY:   (( grab meta.aws.access_key ))
          AWS_SECRET_KEY:   (( grab meta.aws.secret_key ))
          BRANCH:       (( grab meta.github.branch ))
      on_success:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: blob ingestion job '$BUILD_JOB_NAME' succeeded.
          ok:      yes
          link:    (( grab meta.shout.links.build ))
      on_failure:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: blob ingestion job '$BUILD_JOB_NAME' failed.
          ok:      no
          link:    (( grab meta.shout.links.build ))
    - put: git
      params:
        rebase: true
        repository: pushme/git
      on_success:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: blob ingestion job '$BUILD_JOB_NAME' succeeded.
          ok:      yes
          link:    (( grab meta.shout.links.build ))
      on_failure:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: blob ingestion job '$BUILD_JOB_NAME' failed.
          ok:      no
          link:    (( grab meta.shout.links.build ))
  # }}}
  - name: safe # {{{
    public: true
    plan:
    - in_parallel:
      - { get: git }
      - { get: safe, trigger: true }
    - task: update-safe
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
        - name: git
        - name: safe
        outputs:
        - name: pushme
        run:
          path: ./git/ci/scripts/update-blob
        params:
          REPO_ROOT:        git
          REPO_OUT:         pushme
          RELEASE_DIR:      safe
          BLOB_DIR:         safe
          BLOB_NAME:        safe
          BLOB_BINARY:      safe-linux-amd64
          BLOB_DESTINATION: jumpbox/bins/safe
          BLOB_CLEANUP:     jumpbox/bins/safe
          AWS_ACCESS_KEY:   (( grab meta.aws.access_key ))
          AWS_SECRET_KEY:   (( grab meta.aws.secret_key ))
          BRANCH:       (( grab meta.github.branch ))
      on_success:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: blob ingestion job '$BUILD_JOB_NAME' succeeded.
          ok:      yes
          link:    (( grab meta.shout.links.build ))
      on_failure:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: blob ingestion job '$BUILD_JOB_NAME' failed.
          ok:      no
          link:    (( grab meta.shout.links.build ))
    - put: git
      params:
        rebase: true
        repository: pushme/git
      on_success:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: blob ingestion job '$BUILD_JOB_NAME' succeeded.
          ok:      yes
          link:    (( grab meta.shout.links.build ))
      on_failure:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: blob ingestion job '$BUILD_JOB_NAME' failed.
          ok:      no
          link:    (( grab meta.shout.links.build ))
  # }}}
  - name: esuf # {{{
    public: true
    plan:
    - in_parallel:
      - { get: git }
      - { get: esuf, trigger: true }
    - task: update-safe
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
        - name: git
        - name: esuf
        outputs:
        - name: pushme
        run:
          path: ./git/ci/scripts/update-blob
        params:
          REPO_ROOT:        git
          REPO_OUT:         pushme
          RELEASE_DIR:      esuf
          BLOB_DIR:         esuf
          BLOB_NAME:        esuf
          BLOB_BINARY:      esuf-linux-amd64
          BLOB_DESTINATION: jumpbox/bins/esuf
          BLOB_CLEANUP:     jumpbox/bins/esuf
          AWS_ACCESS_KEY:   (( grab meta.aws.access_key ))
          AWS_SECRET_KEY:   (( grab meta.aws.secret_key ))
          BRANCH:       (( grab meta.github.branch ))
      on_success:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: blob ingestion job '$BUILD_JOB_NAME' succeeded.
          ok:      yes
          link:    (( grab meta.shout.links.build ))
      on_failure:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: blob ingestion job '$BUILD_JOB_NAME' failed.
          ok:      no
          link:    (( grab meta.shout.links.build ))
    - put: git
      params:
        rebase: true
        repository: pushme/git
      on_success:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: blob ingestion job '$BUILD_JOB_NAME' succeeded.
          ok:      yes
          link:    (( grab meta.shout.links.build ))
      on_failure:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: blob ingestion job '$BUILD_JOB_NAME' failed.
          ok:      no
          link:    (( grab meta.shout.links.build ))
  # }}}
  - name: cf # {{{
    public: true
    plan:
    - in_parallel:
      - { get: git }
      - { get: cf, trigger: true }
    - task: update-cf
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
        - name: git
        - name: cf
        outputs:
        - name: pushme
        run:
          path: ./git/ci/scripts/update-blob
        params:
          REPO_ROOT:        git
          REPO_OUT:         pushme
          RELEASE_DIR:      cf
          BLOB_SOURCE:      https://cli.run.pivotal.io/stable?release=linux64-binary&version=%s&source=github-rel&x=.tgz
          BLOB_DIR:         cf
          BLOB_NAME:        cf
          BLOB_BINARY:      cf
          BLOB_DESTINATION: jumpbox/bins/cf
          BLOB_CLEANUP:     jumpbox/bins/cf
          AWS_ACCESS_KEY:   (( grab meta.aws.access_key ))
          AWS_SECRET_KEY:   (( grab meta.aws.secret_key ))
          BRANCH:           (( grab meta.github.branch ))
      on_success:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: blob ingestion job '$BUILD_JOB_NAME' succeeded.
          ok:      yes
          link:    (( grab meta.shout.links.build ))
      on_failure:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: blob ingestion job '$BUILD_JOB_NAME' failed.
          ok:      no
          link:    (( grab meta.shout.links.build ))
    - put: git
      params:
        rebase: true
        repository: pushme/git
      on_success:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: blob ingestion job '$BUILD_JOB_NAME' succeeded.
          ok:      yes
          link:    (( grab meta.shout.links.build ))
      on_failure:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: blob ingestion job '$BUILD_JOB_NAME' failed.
          ok:      no
          link:    (( grab meta.shout.links.build ))
  # }}}
  - name: cloudfoundry-utils # {{{
    public: true
    plan:
    - in_parallel:
      - { get: git }
      - { get: cloudfoundry-utils, trigger: true }
    - task: update-cloudfoundry-utils
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
        - name: git
        - name: cloudfoundry-utils
        outputs:
        - name: pushme
        run:
          path: ./git/ci/scripts/update-blob
        params:
          REPO_ROOT:        git
          REPO_OUT:         pushme
          RELEASE_DIR:      cloudfoundry-utils
          BLOB_DIR:         cloudfoundry-utils
          BLOB_NAME:        cloudfoundry-utils
          BLOB_BINARY:      '*'
          BLOB_DESTINATION: jumpbox/cloudfoundry-utils/
          BLOB_CLEANUP:     jumpbox/cloudfoundry-utils/*
          AWS_ACCESS_KEY:   (( grab meta.aws.access_key ))
          AWS_SECRET_KEY:   (( grab meta.aws.secret_key ))
          BRANCH:           (( grab meta.github.branch ))
      on_success:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: blob ingestion job '$BUILD_JOB_NAME' succeeded.
          ok:      yes
          link:    (( grab meta.shout.links.build ))
      on_failure:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: blob ingestion job '$BUILD_JOB_NAME' failed.
          ok:      no
          link:    (( grab meta.shout.links.build ))
    - put: git
      params:
        rebase: true
        repository: pushme/git
      on_success:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: blob ingestion job '$BUILD_JOB_NAME' succeeded.
          ok:      yes
          link:    (( grab meta.shout.links.build ))
      on_failure:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: blob ingestion job '$BUILD_JOB_NAME' failed.
          ok:      no
          link:    (( grab meta.shout.links.build ))
   # }}}

resources:
  - name: genesis # {{{
    type: github-release
    source:
      user: genesis-community
      repository: genesis
      access_token: (( grab meta.github.access_token ))
  # }}}
  - name: safe # {{{
    type: github-release
    source:
      user: starkandwayne
      repository: safe
      access_token: (( grab meta.github.access_token ))
  # }}}
  - name: esuf # {{{
    type: github-release
    source:
      user: starkandwayne
      repository: esuf
      access_token: (( grab meta.github.access_token ))
  # }}}
  - name: cf # {{{
    type: github-release
    source:
      user: cloudfoundry
      repository: cli
      access_token: (( grab meta.github.access_token ))
  # }}}
  - name: cloudfoundry-utils # {{{
    type: github-release
    source:
      user: cloudfoundry-community
      repository: cloudfoundry-utils
      access_token: (( grab meta.github.access_token ))
  # }}}
